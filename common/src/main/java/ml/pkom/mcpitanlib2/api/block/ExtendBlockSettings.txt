package ml.pkom.mcpitanlib2.api.block;

import ml.pkom.mcpitanlib2.mixin.AbstractBlockAccessor;
import ml.pkom.mcpitanlib2.mixin.AbstractBlockSettingsAccessor;
import net.minecraft.block.*;
import net.minecraft.block.BlockState;
import net.minecraft.entity.EntityType;
import net.minecraft.sound.BlockSoundGroup;
import net.minecraft.util.DyeColor;
import net.minecraft.util.Identifier;

import java.util.function.ToIntFunction;

public class ExtendBlockSettings extends AbstractBlock.Settings {
    public static ExtendBlockSettings create(Material material, MapColor color) {
        return create(AbstractBlock.Settings.of(material, color));
    }
    public static ExtendBlockSettings create(AbstractBlock.Settings otherSettings) {
        AbstractBlockSettingsAccessor otherAccessor = (AbstractBlockSettingsAccessor) otherSettings;
        ExtendBlockSettings settings = (ExtendBlockSettings) AbstractBlock.Settings.of(otherAccessor.getMaterial(), otherAccessor.getMapColorProvider());
        AbstractBlockSettingsAccessor thisAccessor = (AbstractBlockSettingsAccessor) settings;

        thisAccessor.setMaterial(otherAccessor.getMaterial());
        settings.hardness(otherAccessor.getHardness());
        settings.resistance(otherAccessor.getResistance());
        settings.collidable(otherAccessor.getCollidable());
        thisAccessor.setRandomTicks(otherAccessor.getRandomTicks());
        settings.luminance(otherAccessor.getLuminance());
        thisAccessor.setMapColorProvider(otherAccessor.getMapColorProvider());
        settings.sounds(otherAccessor.getSoundGroup());
        settings.slipperiness(otherAccessor.getSlipperiness());
        settings.velocityMultiplier(otherAccessor.getVelocityMultiplier());
        settings.jumpVelocityMultiplier(otherAccessor.getJumpVelocityMultiplier());
        thisAccessor.setDynamicBounds(otherAccessor.getDynamicBounds());
        thisAccessor.setOpaque(otherAccessor.getOpaque());
        thisAccessor.setIsAir(otherAccessor.getIsAir());
        thisAccessor.setToolRequired(otherAccessor.isToolRequired());
        settings.allowsSpawning(otherAccessor.getAllowsSpawningPredicate());
        settings.solidBlock(otherAccessor.getSolidBlockPredicate());
        settings.suffocates(otherAccessor.getSuffocationPredicate());
        settings.blockVision(otherAccessor.getBlockVisionPredicate());
        settings.postProcess(otherAccessor.getPostProcessPredicate());
        settings.emissiveLighting(otherAccessor.getEmissiveLightingPredicate());
        settings.offsetType(otherAccessor.getOffsetType());
        return settings;
    }

    public static ExtendBlockSettings of(Material material) {
        return of(material, material.getColor());
    }

    public static ExtendBlockSettings of(Material material, MapColor color) {
        return create(material, color);
    }

    public static ExtendBlockSettings of(Material material, DyeColor color) {
        return create(material, color.getMapColor());
    }

    public static ExtendBlockSettings copyOf(AbstractBlock block) {
        return create(((AbstractBlockAccessor) block).getSettings());
    }

    public static ExtendBlockSettings copyOf(AbstractBlock.Settings settings) {
        return create(settings);
    }

    @Override
    public ExtendBlockSettings noCollision() {
        super.noCollision();
        return this;
    }

    @Override
    public ExtendBlockSettings nonOpaque() {
        super.nonOpaque();
        return this;
    }

    @Override
    public ExtendBlockSettings slipperiness(float value) {
        super.slipperiness(value);
        return this;
    }

    @Override
    public ExtendBlockSettings velocityMultiplier(float velocityMultiplier) {
        super.velocityMultiplier(velocityMultiplier);
        return this;
    }

    @Override
    public ExtendBlockSettings jumpVelocityMultiplier(float jumpVelocityMultiplier) {
        super.jumpVelocityMultiplier(jumpVelocityMultiplier);
        return this;
    }

    @Override
    public ExtendBlockSettings sounds(BlockSoundGroup group) {
        super.sounds(group);
        return this;
    }

    /**
     * @deprecated Please use {@link ExtendBlockSettings#luminance(ToIntFunction)}.
     */
    public ExtendBlockSettings lightLevel(ToIntFunction<net.minecraft.block.BlockState> levelFunction) {
        return this.luminance(levelFunction);
    }

    @Override
    public ExtendBlockSettings luminance(ToIntFunction<BlockState> luminanceFunction) {
        super.luminance(luminanceFunction);
        return this;
    }

    @Override
    public ExtendBlockSettings strength(float hardness, float resistance) {
        super.strength(hardness, resistance);
        return this;
    }

    @Override
    public ExtendBlockSettings breakInstantly() {
        super.breakInstantly();
        return this;
    }

    public ExtendBlockSettings strength(float strength) {
        super.strength(strength);
        return this;
    }

    @Override
    public ExtendBlockSettings ticksRandomly() {
        super.ticksRandomly();
        return this;
    }

    @Override
    public ExtendBlockSettings dynamicBounds() {
        super.dynamicBounds();
        return this;
    }

    @Override
    public ExtendBlockSettings dropsLike(Block block) {
        super.dropsLike(block);
        return this;
    }

    @Override
    public ExtendBlockSettings air() {
        super.air();
        return this;
    }

    @Override
    public ExtendBlockSettings allowsSpawning(AbstractBlock.TypedContextPredicate<EntityType<?>> predicate) {
        super.allowsSpawning(predicate);
        return this;
    }

    @Override
    public ExtendBlockSettings solidBlock(AbstractBlock.ContextPredicate predicate) {
        super.solidBlock(predicate);
        return this;
    }

    @Override
    public ExtendBlockSettings suffocates(AbstractBlock.ContextPredicate predicate) {
        super.suffocates(predicate);
        return this;
    }

    @Override
    public ExtendBlockSettings blockVision(AbstractBlock.ContextPredicate predicate) {
        super.blockVision(predicate);
        return this;
    }

    @Override
    public ExtendBlockSettings postProcess(AbstractBlock.ContextPredicate predicate) {
        super.postProcess(predicate);
        return this;
    }

    @Override
    public ExtendBlockSettings emissiveLighting(AbstractBlock.ContextPredicate predicate) {
        super.emissiveLighting(predicate);
        return this;
    }

    /* FABRIC ADDITIONS*/

    /**
     * @deprecated Please use {@link ExtendBlockSettings#luminance(int)}.
     */
    @Deprecated
    public ExtendBlockSettings lightLevel(int lightLevel) {
        this.luminance(lightLevel);
        return this;
    }

    public ExtendBlockSettings luminance(int luminance) {
        this.luminance(ignored -> luminance);
        return this;
    }

    public ExtendBlockSettings hardness(float hardness) {
        ((AbstractBlockSettingsAccessor) this).setHardness(hardness);
        return this;
    }

    public ExtendBlockSettings resistance(float resistance) {
        ((AbstractBlockSettingsAccessor) this).setResistance(Math.max(0.0F, resistance));
        return this;
    }

    public ExtendBlockSettings drops(Identifier dropTableId) {
        ((AbstractBlockSettingsAccessor) this).setLootTableId(dropTableId);
        return this;
    }

    /**
     * Make the block require tool to drop and slows down mining speed if the incorrect tool is used.
     */
    @Override
    public ExtendBlockSettings requiresTool() {
        super.requiresTool();
        return this;
    }

    /* FABRIC DELEGATE WRAPPERS */

    /**
     * @deprecated Please migrate to {@link ExtendBlockSettings#mapColor(MapColor)}
     */
    @Deprecated
    public ExtendBlockSettings materialColor(MapColor color) {
        return this.mapColor(color);
    }

    /**
     * @deprecated Please migrate to {@link ExtendBlockSettings#mapColor(DyeColor)}
     */
    @Deprecated
    public ExtendBlockSettings materialColor(DyeColor color) {
        return this.mapColor(color);
    }

    public ExtendBlockSettings mapColor(MapColor color) {
        ((AbstractBlockSettingsAccessor) this).setMapColorProvider(ignored -> color);
        return this;
    }

    public ExtendBlockSettings mapColor(DyeColor color) {
        return this.mapColor(color.getMapColor());
    }

    public ExtendBlockSettings collidable(boolean collidable) {
        ((AbstractBlockSettingsAccessor) this).setCollidable(collidable);
        return this;
    }
}
